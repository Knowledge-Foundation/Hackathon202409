type anon_class_12_1 = 
 service {
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_update: (HttpRequest) -> (HttpResponse);
   proxy: (text) -> (CanisterHttpResponsePayload);
   transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
 };
type TransformArgs = 
 record {
   context: blob;
   response: CanisterHttpResponsePayload;
 };
type Token = record {arbitrary_data: text;};
type StreamingStrategy = variant {Callback: CallbackStrategy;};
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt Token;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
   upgrade: opt bool;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type CallbackStrategy = 
 record {
   callback: func (Token) -> (StreamingCallbackHttpResponse) query;
   token: Token;
 };
service : () -> anon_class_12_1
