type UserSettingsResult = 
 variant {
   Err: ApiError;
   Ok: UserSettings;
 };
type UserSettings = record {selectedAiModelId: text;};
type UpdateUserSettingsResult = 
 variant {
   Err: ApiError;
   Ok: bool;
 };
type UpdateChatObject = 
 record {
   chatTitle: text;
   id: text;
 };
type SignUpFormInput = 
 record {
   emailAddress: text;
   pageSubmittedFrom: text;
 };
type MessagesObject = 
 record {
   encrypted: bool;
   messages: text;
 };
type FirstMessagePreviewObject = 
 record {
   encrypted: bool;
   firstMessagePreview: text;
 };
type EmailSubscriber = 
 record {
   emailAddress: text;
   pageSubmittedFrom: text;
   subscribedAt: nat64;
 };
type DeVinciBackend = 
 service {
   app_vetkd_public_key: (vec blob) -> (text);
   create_chat: (MessagesObject, FirstMessagePreviewObject) ->
    (ChatCreationResult);
   delete_chat: (text) -> (ChatResult);
   delete_email_subscriber: (text) -> (bool);
   encrypted_symmetric_key_for_caller: (blob) -> (text);
   get_caller_chat_history: () -> (ChatsPreviewResult) query;
   get_caller_chats: () -> (ChatsResult) query;
   get_caller_settings: () -> (UserSettingsResult) query;
   get_chat: (text) -> (ChatResult) query;
   get_email_subscribers: () -> (vec record {
                                       text;
                                       EmailSubscriber;
                                     }) query;
   greet: (text) -> (text);
   submit_signup_form: (SignUpFormInput) -> (text);
   symmetric_key_verification_key: () -> (text);
   update_caller_settings: (UserSettings) -> (UpdateUserSettingsResult);
   update_chat_messages: (text, MessagesObject) -> (ChatIdResult);
   update_chat_metadata: (UpdateChatObject) -> (ChatIdResult);
 };
type ChatsResult = 
 variant {
   Err: ApiError;
   Ok: vec Chat;
 };
type ChatsPreviewResult = 
 variant {
   Err: ApiError;
   Ok: vec ChatPreview;
 };
type ChatResult = 
 variant {
   Err: ApiError;
   Ok: Chat;
 };
type ChatPreview = 
 record {
   chatTitle: text;
   creationTime: nat64;
   firstMessagePreview: FirstMessagePreviewObject;
   id: text;
 };
type ChatIdResult = 
 variant {
   Err: ApiError;
   Ok: text;
 };
type ChatCreationResult = 
 variant {
   Err: ApiError;
   Ok: text;
 };
type Chat = 
 record {
   chatTitle: text;
   creationTime: nat64;
   firstMessagePreview: FirstMessagePreviewObject;
   id: text;
   messages: MessagesObject;
   owner: principal;
 };
type ApiError = 
 variant {
   InvalidTokenId;
   Other: text;
   Unauthorized;
   ZeroAddress;
 };
service : (principal) -> DeVinciBackend
